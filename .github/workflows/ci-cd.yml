name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'chatui-v1'

jobs:
  # Code Quality & Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'

    - name: 🔍 Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-node-

    - name: 📥 Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: 🔧 Type checking
      run: npm run type-check || npm run build --dry-run

    - name: 🧹 Lint code
      run: npm run lint

    - name: 🧪 Run tests (if available)
      run: |
        if npm run test --dry-run 2>/dev/null; then
          npm run test
        else
          echo "No tests configured - skipping test step"
        fi
      continue-on-error: true

    - name: 📊 Upload coverage reports (if available)
      if: success()
      uses: codecov/codecov-action@v4
      with:
        fail_ci_if_error: false
      continue-on-error: true

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci --prefer-offline --no-audit

    - name: 🏗️ Build application
      run: npm run build
      env:
        # Production environment variables
        VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL || 'http://localhost:8000' }}
        VITE_API_TIMEOUT: ${{ secrets.VITE_API_TIMEOUT || '30000' }}
        VITE_API_RETRY_ATTEMPTS: ${{ secrets.VITE_API_RETRY_ATTEMPTS || '3' }}

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 7

    - name: 📏 Bundle size analysis
      run: |
        echo "📊 Build Summary:"
        du -sh dist/
        echo "📁 Build Contents:"
        ls -la dist/
        echo "🎯 Main Bundle Size:"
        find dist/assets -name "*.js" -exec ls -lh {} \; | head -5

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 🔒 Security audit
      run: npm audit --audit-level=high
      continue-on-error: true

    - name: 🛡️ Check for vulnerabilities
      run: |
        echo "🔍 Checking for known vulnerabilities..."
        npm audit --json > audit-results.json || true
        
        # Check if there are high/critical vulnerabilities
        HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
        CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
        
        echo "High vulnerabilities: $HIGH_VULNS"
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "❌ Critical vulnerabilities found!"
          exit 1
        elif [ "$HIGH_VULNS" -gt 0 ]; then
          echo "⚠️ High vulnerabilities found - review recommended"
        else
          echo "✅ No high/critical vulnerabilities found"
        fi

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: 🚀 Deploy to Development
      run: |
        echo "🚀 Deploying to development environment..."
        echo "This step would deploy to your dev server"
        # Add your deployment commands here
        # Example: rsync, AWS S3, Azure, etc.

  # Deploy to Production
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/

    - name: 🚀 Deploy to Production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "This step would deploy to your production server"
        # Add your production deployment commands here

  # Dependency Updates Check
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🚀 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🔄 Check for updates
      run: |
        echo "📋 Checking for dependency updates..."
        npx npm-check-updates --format group
        echo "💡 Run 'npx npm-check-updates -u' to update package.json"
